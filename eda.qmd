---
title: "Penguins EDA"
format:
  html:
    code-fold: true
---

## Penguin Size and Mass by Sex and Species

```{r, warning=FALSE, message=FALSE}
library(palmerpenguins)
library(dplyr)
library(dbplyr)
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(rpart.plot)

con <- DBI::dbConnect(
  duckdb::duckdb(), 
  dbdir = "my-db.duckdb"
  )
df <- palmerpenguins::penguins
```

```{r, warning=FALSE, message=FALSE}
df %>%
  group_by(species, sex) %>%
  summarise(
    across(
      where(is.numeric), 
      \(x) mean(x, na.rm = TRUE)
      )
    ) %>%
  dplyr::collect() %>%
  knitr::kable()
```

## Penguin Size vs Mass by Species

```{r, warning=FALSE, message=FALSE}
df %>%
  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
  geom_point() + 
  geom_smooth(method = "lm")
```

## Predicting Penguin Sex using Classification Trees

This code chuck does the following:

\- cleans up the penguins dataframe by dropping all of the N/A entries

\- creates a training and testing split - sets up a classification tree specification

\- set up workflow with formula to predict sex and tune cost complexity

\- make 10 folds of training data

\- create grid with range of cost complexity values and levels

\- fit each model and assess model performance

\- use best model performance as final fit - plot decision tree

\- evaluate model performance on test data

```{r, warning=FALSE, message=FALSE}
# Clean up data set
penguins <- df %>%
  drop_na()
# separate data into training and testing sets
set.seed(12345)
penguins_split <- initial_split(penguins, prop = 0.8, strata = sex)
penguins_train <- training(penguins_split)
penguins_test <- testing(penguins_split)
# set up specification for classification trees
class_tree_spec <- decision_tree() %>%
  set_engine("rpart") %>%
  set_mode("classification")
# create workflow based on sex
class_tree_wf <- workflow() %>%
  add_model(class_tree_spec %>% set_args(cost_complexity = tune())) %>%
  add_formula(sex~ .)
# create folds
penguins_folds <- vfold_cv(penguins_train, v = 10, strata = sex)
# set up grid
param_grid <- grid_regular(cost_complexity(range = c(-5, 5)), levels = 10)
# fit and tune each model
tune_res <- tune_grid(
  class_tree_wf, 
  resamples = penguins_folds, 
  grid = param_grid, 
  metrics = metric_set(accuracy)
)
# select best metric to fit best model
best_complexity <- select_best(tune_res)
class_tree_final <- finalize_workflow(class_tree_wf, best_complexity)
class_tree_final_fit <- fit(class_tree_final, data = penguins_train)
# plot decision tree
class_tree_final_fit %>%      
  extract_fit_engine() %>%      
  rpart.plot()
# accuracy results of test data
augment(class_tree_final_fit, new_data = penguins_test) %>%      
  accuracy(truth = sex, estimate = .pred_class)
```

```{r}
DBI::dbDisconnect(con, shutdown = TRUE)
```
