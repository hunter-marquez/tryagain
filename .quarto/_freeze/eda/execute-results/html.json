{
  "hash": "cb5b6ca1598e6221fd5ac9a95f030d87",
  "result": {
    "markdown": "---\ntitle: \"Penguins EDA\"\nformat:\n  html:\n    code-fold: true\n---\n\n\n## Penguin Size and Mass by Sex and Species\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'palmerpenguins' was built under R version 4.3.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(dbplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dbplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:dplyr':\n\n    ident, sql\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n✔ readr     2.1.5     \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dbplyr::ident() masks dplyr::ident()\n✖ dplyr::lag()    masks stats::lag()\n✖ dbplyr::sql()   masks dplyr::sql()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.5      ✔ rsample      1.2.1 \n✔ dials        1.2.1      ✔ tune         1.2.1 \n✔ infer        1.0.7      ✔ workflows    1.1.4 \n✔ modeldata    1.3.0      ✔ workflowsets 1.1.0 \n✔ parsnip      1.2.1      ✔ yardstick    1.3.1 \n✔ recipes      1.0.10     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dbplyr::ident()   masks dplyr::ident()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ dbplyr::sql()     masks dplyr::sql()\n✖ recipes::step()   masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n```\n:::\n\n```{.r .cell-code}\nlibrary(rpart.plot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: rpart\n\nAttaching package: 'rpart'\n\nThe following object is masked from 'package:dials':\n\n    prune\n```\n:::\n\n```{.r .cell-code}\ncon <- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf <- palmerpenguins::penguins\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  group_by(species, sex) %>%\n  summarise(\n    across(\n      where(is.numeric), \n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %>%\n  dplyr::collect() %>%\n  knitr::kable()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output-display}\n|species   |sex    | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|     year|\n|:---------|:------|--------------:|-------------:|-----------------:|-----------:|--------:|\n|Adelie    |female |       37.25753|      17.62192|          187.7945|    3368.836| 2008.055|\n|Adelie    |male   |       40.39041|      19.07260|          192.4110|    4043.493| 2008.055|\n|Adelie    |NA     |       37.84000|      18.32000|          185.6000|    3540.000| 2007.000|\n|Chinstrap |female |       46.57353|      17.58824|          191.7353|    3527.206| 2007.971|\n|Chinstrap |male   |       51.09412|      19.25294|          199.9118|    3938.971| 2007.971|\n|Gentoo    |female |       45.56379|      14.23793|          212.7069|    4679.741| 2008.069|\n|Gentoo    |male   |       49.47377|      15.71803|          221.5410|    5484.836| 2008.066|\n|Gentoo    |NA     |       45.62500|      14.55000|          215.7500|    4587.500| 2008.400|\n:::\n:::\n\n\n## Penguin Size vs Mass by Species\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](eda_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Pengiun Sex Classification using Classification Trees\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Clean up data set\npenguins <- df %>%\n  drop_na()\n# separate data into training and testing sets\npenguins_split <- initial_split(penguins, prop = 0.8, strata = sex)\npenguins_train <- training(penguins_split)\npenguins_test <- testing(penguins_split)\n# set up specification for classification trees\ntree_spec <- decision_tree() %>%   \n  set_engine(\"rpart\")\nclass_tree_spec <- tree_spec %>%      \n  set_mode(\"classification\")\n# create workflow based on sex\nclass_tree_wf <- workflow() %>%\n  add_model(class_tree_spec %>% set_args(cost_complexity = tune())) %>%\n  add_formula(sex~ .)\n# create folds\npenguins_folds <- vfold_cv(penguins_train, v = 10, strata = sex)\n# set up grid\nparam_grid <- grid_regular(cost_complexity(range = c(-5, 5)), levels = 10)\n# fit and tune each model\ntune_res <- tune_grid(\n  class_tree_wf, \n  resamples = penguins_folds, \n  grid = param_grid, \n  metrics = metric_set(accuracy)\n)\ncollect_metrics(tune_res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 7\n   cost_complexity .metric  .estimator  mean     n std_err .config              \n             <dbl> <chr>    <chr>      <dbl> <int>   <dbl> <chr>                \n 1        0.00001  accuracy binary     0.868    10 0.0222  Preprocessor1_Model01\n 2        0.000129 accuracy binary     0.868    10 0.0222  Preprocessor1_Model02\n 3        0.00167  accuracy binary     0.868    10 0.0222  Preprocessor1_Model03\n 4        0.0215   accuracy binary     0.868    10 0.0205  Preprocessor1_Model04\n 5        0.278    accuracy binary     0.691    10 0.0201  Preprocessor1_Model05\n 6        3.59     accuracy binary     0.504    10 0.00247 Preprocessor1_Model06\n 7       46.4      accuracy binary     0.504    10 0.00247 Preprocessor1_Model07\n 8      599.       accuracy binary     0.504    10 0.00247 Preprocessor1_Model08\n 9     7743.       accuracy binary     0.504    10 0.00247 Preprocessor1_Model09\n10   100000        accuracy binary     0.504    10 0.00247 Preprocessor1_Model10\n```\n:::\n\n```{.r .cell-code}\n# select best metric to fit best model\nbest_complexity <- select_best(tune_res)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in select_best(tune_res): No value of `metric` was given; \"accuracy\"\nwill be used.\n```\n:::\n\n```{.r .cell-code}\nclass_tree_final <- finalize_workflow(class_tree_wf, best_complexity)\nclass_tree_final_fit <- fit(class_tree_final, data = penguins_train)\n# plot decision tree\nclass_tree_final_fit %>%      \n  extract_fit_engine() %>%      \n  rpart.plot()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Cannot retrieve the data used to build the model (so cannot determine roundint and is.binary for the variables).\nTo silence this warning:\n    Call rpart.plot with roundint=FALSE,\n    or rebuild the rpart model with model=TRUE.\n```\n:::\n\n::: {.cell-output-display}\n![](eda_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# accuracy results of test data\naugment(class_tree_final_fit, new_data = penguins_test) %>%      \n  accuracy(truth = sex, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.821\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nDBI::dbDisconnect(con, shutdown = TRUE)\n```\n:::\n",
    "supporting": [
      "eda_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}