model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/',allow_pickle_read=True)
vetiver_pin_write(b,v)
app = VetiverAPI(v,check_prototype=True)
app.run(port = 8080)
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
from vetiver import VetiverAPI
from vetiver import vetiver_pin_write
from vetiver import prepare_docker
import pins
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/',allow_pickle_read=True)
vetiver_pin_write(b,v)
quit
app = VetiverAPI(v,check_prototype=True)
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
from vetiver import VetiverAPI
from vetiver import vetiver_pin_write
from vetiver import prepare_docker
import pins
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/',allow_pickle_read=True)
vetiver_pin_write(b,v)
app = VetiverAPI(v,check_prototype=True)
app.run(port = 8080)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
from vetiver import VetiverAPI
from vetiver import vetiver_pin_write
from vetiver import prepare_docker
import pins
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
quit
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
reticulate::repl_python()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
quit
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
from vetiver import VetiverAPI
from vetiver import vetiver_pin_write
from vetiver import prepare_docker
import pins
import duckdb
df = penguins.load_penguins().dropna()
df.head(3)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
quit
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
con <- DBI::dbConnect(duckdb::duckdb(), dbname = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
DBI::dbDisconnect(con)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
con <- DBI::dbConnect(duckdb::duckdb(), dbname = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
DBI::dbDisconnect(con)
con <- DBI::dbConnect(duckdb::duckdb(), dbname = "my-db.duckdb")
df <-dplyr::tbl(con,"penguins")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(duckdb)
df <- palmerpenguins::penguins
con <- DBI::dbConnect(duckdb::duckdb(), dbname = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
DBI::dbDisconnect(con)
con <- DBI::dbConnect(duckdb::duckdb(), dbname = "my-db.duckdb")
df <-dplyr::tbl(con,"penguins")
reticulate::repl_python()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/',allow_pickle_read=True)
vetiver_pin_write(b,v)
app = VetiverAPI(v,check_prototype=True)
app.run(port = 8080)
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
from vetiver import VetiverAPI
from vetiver import vetiver_pin_write
from vetiver import prepare_docker
import pins
import duckdb
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/',allow_pickle_read=True)
vetiver_pin_write(b,v)
app = VetiverAPI(v,check_prototype=True)
app.run(port = 8080)
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
from vetiver import VetiverAPI
from vetiver import vetiver_pin_write
from vetiver import prepare_docker
import pins
import duckdb
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/',allow_pickle_read=True)
vetiver_pin_write(b,v)
app = VetiverAPI(v,check_prototype=True)
app.run(port = 8080)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/',allow_pickle_read=True)
vetiver_pin_write(b,v)
app = VetiverAPI(v,check_prototype=True)
app.run(port = 8080)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/',allow_pickle_read=True)
vetiver_pin_write(b,v)
app = VetiverAPI(v,check_prototype=True)
app.run(port = 8080)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/',allow_pickle_read=True)
vetiver_pin_write(b,v)
app = VetiverAPI(v,check_prototype=True)
#app.run(port = 8080)
app.run(port=8080)
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
from vetiver import VetiverAPI
from vetiver import vetiver_pin_write
from vetiver import prepare_docker
import pins
import duckdb
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/',allow_pickle_read=True)
vetiver_pin_write(b,v)
app = VetiverAPI(v,check_prototype=True)
app.run(port = 8080)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/',allow_pickle_read=True)
vetiver_pin_write(b,v)
app = VetiverAPI(v,check_prototype=True)
app.run(port = 8080)
import requests
req_data = {
"bill_length_mm": 0,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/',allow_pickle_read=True)
vetiver_pin_write(b,v)
app = VetiverAPI(v,check_prototype=True)
#app.run(port = 8080)
import requests
req_data = {
"bill_length_mm": 0,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/',allow_pickle_read=True)
vetiver_pin_write(b,v)
app = VetiverAPI(v,check_prototype=True)
#app.run(port = 8080)
import requests
req_data = {
"bill_length_mm": 0,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
(res = req.json().get('predict')[0])
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/',allow_pickle_read=True)
vetiver_pin_write(b,v)
app = VetiverAPI(v,check_prototype=True)
#app.run(port = 8080)
import requests
req_data = {
"bill_length_mm": 0,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = display(req.json().get('predict')[0])
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/',allow_pickle_read=True)
vetiver_pin_write(b,v)
app = VetiverAPI(v,check_prototype=True)
app.run(port = 8080)
import requests
req_data = {
"bill_length_mm": 0,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
View(res)
import requests
req_data = {
"bill_length_mm": 0,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
res
from shiny import App, render, ui, reactive
quit
reticulate::source_python('~/School/Spring 2024/Math 378/Final Project/app.py')
con <- DBI::dbConnect(duckdb::duckdb(), dbname = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
DBI::dbDisconnect(con)
con <- DBI::dbConnect(duckdb::duckdb(), dbname = "my-db.duckdb")
df <-dplyr::tbl(con,"penguins")
install.packages("dbplyr")
library{dbplyr}
library(dbplyr)
con <- DBI::dbConnect(duckdb::duckdb(), dbname = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
DBI::dbDisconnect(con)
con <- DBI::dbConnect(duckdb::duckdb(), dbname = "my-db.duckdb")
df <-dplyr::tbl(con,"penguins")
con <- DBI::dbConnect(duckdb::duckdb(), dbname = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
DBI::dbDisconnect(con)
con <- DBI::dbConnect(duckdb::duckdb(), dbname = "my-db.duckdb")
df <-dplyr::tbl(con,"penguins")
reticulate::source_python('~/School/Spring 2024/Math 378/Final Project/app_logging.py')
reticulate::repl_python()
return d
from shiny import App, render, ui, reactive
import requests
api_url = 'http://127.0.0.1:8080/predict'
app_ui = ui.page_fluid(
ui.panel_title("Penguin Mass Predictor"),
ui.layout_sidebar(
ui.panel_sidebar(
[ui.input_slider("bill_length", "Bill Length (mm)", 30, 60, 45, step = 0.1),
ui.input_select("sex", "Sex", ["Male", "Female"]),
ui.input_select("species", "Species", ["Adelie", "Chinstrap", "Gentoo"]),
ui.input_action_button("predict", "Predict")]
),
ui.panel_main(
ui.h2("Penguin Parameters"),
ui.output_text_verbatim("vals_out"),
ui.h2("Predicted Penguin Mass (g)"),
ui.output_text("pred_out")
)
)
)
import logging
logging.basicConfig(
format='%(asctime)s - %(message)s',
level=logging.INFO
)
def server(input, output, session):
logging.info("App start")
@reactive.Calc
def vals():
d = {
"bill_length_mm" : input.bill_length(),
"sex_male" : input.sex() == "Male",
"species_Gentoo" : input.species() == "Gentoo",
"species_Chinstrap" : input.species() == "Chinstrap"
}
return d
@reactive.Calc
@reactive.event(input.predict)
def pred():
logging.info("Request Made")
r = requests.post(api_url, json = [vals()])
logging.info("Request Returned")
if r.status_code != 200:
logging.error("HTTP error returned")
return r.json().get('predict')[0]
@output
@render.text
def vals_out():
return f"{vals()}"
@output
@render.text
def pred_out():
return f"{round(pred())}"
quit
reticulate::source_python('~/School/Spring 2024/Math 378/Final Project/app_logging.py')
reticulate::repl_python()
ui.panel_main(
quit
quit
con <- DBI::dbConnect(duckdb::duckdb(), dbname = "my-db.duckdb")
quit
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(duckdb)
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
con <- DBI::dbConnect(duckdb::duckdb(), dbname = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
DBI::dbDisconnect(con)
con <- DBI::dbConnect(duckdb::duckdb(), dbname = "my-db.duckdb")
df <-dplyr::tbl(con,"penguins")
con <- DBI::dbConnect(duckdb::duckdb(), dbname = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
df <-dplyr::tbl(con,"penguins")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
DBI::dbDisconnect(con)
reticulate::repl_python()
api_url = 'http://127.0.0.1:8080/predict'
reticulate::repl_python()
from shiny import App, render, ui, reactive
import requests
api_url = 'http://127.0.0.1:8080/predict'
from shiny import App, render, ui, reactive
import requests
api_url = 'http://127.0.0.1:8080/predict'
app_ui = ui.page_fluid(
ui.panel_title("Penguin Mass Predictor"),
ui.layout_sidebar(
ui.panel_sidebar(
[ui.input_slider("bill_length", "Bill Length (mm)", 30, 60, 45, step = 0.1),
ui.input_select("sex", "Sex", ["Male", "Female"]),
ui.input_select("species", "Species", ["Adelie", "Chinstrap", "Gentoo"]),
ui.input_action_button("predict", "Predict")]
),
ui.panel_main(
ui.h2("Penguin Parameters"),
ui.output_text_verbatim("vals_out"),
ui.h2("Predicted Penguin Mass (g)"),
ui.output_text("pred_out")
)
)
)
import logging
logging.basicConfig(
format='%(asctime)s - %(message)s',
level=logging.INFO
)
def server(input, output, session):
logging.info("App start")
@reactive.Calc
def vals():
d = {
"bill_length_mm" : input.bill_length(),
"sex_male" : input.sex() == "Male",
"species_Gentoo" : input.species() == "Gentoo",
"species_Chinstrap" : input.species() == "Chinstrap"
}
return d
@reactive.Calc
@reactive.event(input.predict)
def pred():
logging.info("Request Made")
r = requests.post(api_url, json = [vals()])
logging.info("Request Returned")
if r.status_code != 200:
logging.error("HTTP error returned")
return r.json().get('predict')[0]
@output
@render.text
def vals_out():
return f"{vals()}"
@output
@render.text
def pred_out():
return f"{round(pred())}"
install.packages("usethis")
library(usethis)
use_git_config(user.name = "hunter-marquez", user.email = "c25hunter.marquez@afacademy.af.edu")
library(usethis)
use_git_config(user.name = "hunter-marquez", user.email = "c25hunter.marquez@afacademy.af.edu")
usethis::git_default_branch_configure()
usethis::create_github_token()
