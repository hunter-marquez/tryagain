[
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Model",
    "section": "",
    "text": "Code\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing"
  },
  {
    "objectID": "model.html#get-data",
    "href": "model.html#get-data",
    "title": "Model",
    "section": "Get Data",
    "text": "Get Data\n\n\nCode\nimport duckdb\ncon = duckdb.connect('my-db.duckdb')\ndf = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\ncon.close()\n\ndf.head(3)\n\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007"
  },
  {
    "objectID": "model.html#define-model-and-fit",
    "href": "model.html#define-model-and-fit",
    "title": "Model",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\n\n\nCode\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)"
  },
  {
    "objectID": "model.html#get-some-information",
    "href": "model.html#get-some-information",
    "title": "Model",
    "section": "Get some information",
    "text": "Get some information\n\n\nCode\nprint(f\"R^2 {model.score(X,y)}\")\nprint(f\"Intercept {model.intercept_}\")\nprint(f\"Columns {X.columns}\")\nprint(f\"Coefficients {model.coef_}\")\n\n\nR^2 0.8555368759537614\nIntercept 2169.2697209393996\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]"
  },
  {
    "objectID": "model.html#turn-into-vetiver-model",
    "href": "model.html#turn-into-vetiver-model",
    "title": "Model",
    "section": "Turn into Vetiver Model",
    "text": "Turn into Vetiver Model\n\n\nCode\nfrom vetiver import VetiverModel\nv = VetiverModel(model, model_name='penguin_model', prototype_data=X)"
  },
  {
    "objectID": "model.html#save-to-board",
    "href": "model.html#save-to-board",
    "title": "Model",
    "section": "Save to Board",
    "text": "Save to Board\n\n\nCode\nfrom pins import board_folder\nfrom vetiver import vetiver_pin_write\n\nmodel_board = board_folder(\"/data/model\", allow_pickle_read = True)\n#vetiver_pin_write(model_board, v)"
  },
  {
    "objectID": "model.html#turn-model-into-api",
    "href": "model.html#turn-model-into-api",
    "title": "Model",
    "section": "Turn model into API",
    "text": "Turn model into API\n\n\nCode\nfrom vetiver import VetiverAPI\napp = VetiverAPI(v, check_prototype = True)\n\n\n\n\nCode\n#from vetiver import prepare_docker\n#prepare_docker(b, 'penguin_model')\n\n#import requests\n\n#req_data = {\n # \"bill_length_mm\": 0,\n#  \"species_Chinstrap\": False,\n # \"species_Gentoo\": False,\n#  \"sex_male\": False\n#}\n#req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])\n#res = req.json().get('predict')[0]\n#print(res)\n\n\n\n\nCode\n#library(httr2)\n#req &lt;- httr2::request(\"http://127.0.0.1:8080/predict\") |&gt;\n # httr2::req_body_json(\n  #  list(\n   #   list(\n    #    \"bill_length_mm\" = 0,\n     #   \"species_Chinstrap\" = FALSE,\n      #  \"species_Gentoo\" = FALSE,\n       # \"sex_male\" = FALSE\n      #)\n    #)\n  #) |&gt;\n  #httr2::req_perform()\n#res &lt;- httr2::resp_body_json(req)$predict[[1]]\n#res\n\ncon.close()"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(rpart.plot)\n\ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- palmerpenguins::penguins\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n      where(is.numeric), \n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n2008.055\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n2008.055\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n2007.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n2007.971\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n2007.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n2008.069\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n2008.066\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n2008.400"
  },
  {
    "objectID": "eda.html#penguin-size-and-mass-by-sex-and-species",
    "href": "eda.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(rpart.plot)\n\ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- palmerpenguins::penguins\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n      where(is.numeric), \n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n2008.055\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n2008.055\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n2007.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n2007.971\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n2007.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n2008.069\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n2008.066\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n2008.400"
  },
  {
    "objectID": "eda.html#penguin-size-vs-mass-by-species",
    "href": "eda.html#penguin-size-vs-mass-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Size vs Mass by Species",
    "text": "Penguin Size vs Mass by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")"
  },
  {
    "objectID": "eda.html#predicting-penguin-sex-using-classification-trees",
    "href": "eda.html#predicting-penguin-sex-using-classification-trees",
    "title": "Penguins EDA",
    "section": "Predicting Penguin Sex using Classification Trees",
    "text": "Predicting Penguin Sex using Classification Trees\nThis code chuck does the following:\n- cleans up the penguins dataframe by dropping all of the N/A entries\n- creates a training and testing split - sets up a classification tree specification\n- sets up workflow with formula to predict sex and tune cost complexity\n- makes 10 folds of training data\n- creates grid with range of cost complexity values and levels\n- fits each model and assess model performance\n- uses best model performance as final fit - plot decision tree\n- evaluates model performance on test data\n\n\nCode\n# Clean up data set\npenguins &lt;- df %&gt;%\n  drop_na()\n# separate data into training and testing sets\nset.seed(12345)\npenguins_split &lt;- initial_split(penguins, prop = 0.8, strata = sex)\npenguins_train &lt;- training(penguins_split)\npenguins_test &lt;- testing(penguins_split)\n# set up specification for classification trees\nclass_tree_spec &lt;- decision_tree() %&gt;%\n  set_engine(\"rpart\") %&gt;%\n  set_mode(\"classification\")\n# create workflow based on sex\nclass_tree_wf &lt;- workflow() %&gt;%\n  add_model(class_tree_spec %&gt;% set_args(cost_complexity = tune())) %&gt;%\n  add_formula(sex~ .)\n# create folds\nset.seed(12345)\npenguins_folds &lt;- vfold_cv(penguins_train, v = 10, strata = sex)\n# set up grid\nparam_grid &lt;- grid_regular(cost_complexity(range = c(-5, 5)), levels = 10)\n# fit and tune each model\ntune_res &lt;- tune_grid(\n  class_tree_wf, \n  resamples = penguins_folds, \n  grid = param_grid, \n  metrics = metric_set(accuracy)\n)\n# select best metric to fit best model\nbest_complexity &lt;- select_best(tune_res)\nclass_tree_final &lt;- finalize_workflow(class_tree_wf, best_complexity)\nclass_tree_final_fit &lt;- fit(class_tree_final, data = penguins_train)\n# plot decision tree\nclass_tree_final_fit %&gt;%      \n  extract_fit_engine() %&gt;%      \n  rpart.plot()\n\n\n\n\n\n\n\n\n\nCode\n# accuracy results of test data\naugment(class_tree_final_fit, new_data = penguins_test) %&gt;%      \n  accuracy(truth = sex, estimate = .pred_class)\n\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy binary         0.851\n\n\n\n\nCode\nDBI::dbDisconnect(con, shutdown = TRUE)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Final Project",
    "section": "",
    "text": "This is a Quarto website for Math 378 Final Project.\n\n2 + 2\n\n[1] 4\n\n\nEnjoy these pictures of penguins used with my premium subscription of ChatGPT that I’m trying to make worth $20 a month!\n\nlibrary(grid)\nlibrary(png)\n\n# Read the .png image file\nimg &lt;- readPNG(\"penguin1.png\")\n\n# Create a grid plot with the image\ngrid.newpage()\ngrid.raster(img)\n\n\n\n\n\n\n\n# Read the .png image file\nimg2 &lt;- readPNG(\"penguin2.png\")\n\n# Create a grid plot with the image\ngrid.newpage()\ngrid.raster(img2)"
  }
]